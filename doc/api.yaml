openapi: 3.0.0

servers:
  - url: "http://localhost:3000"

info:
  title: The WASAPhoto Project
  description: |-
    The WASAPhoto Project uses an API that is developed having the following design in mind;

    Each user will have access to a stream of images (photos), in reverse chronological order.
    Each photo will contain information on the time of publishing (date and time) and the amount of likes and comments.
    The displayed photos will originate from other users the user in question follows.
    They can place likes, as well as remove them (on other users' photo(s)).
    They can comment, as well as remove their own (on any user's photo(s)).

    Similarly, users can ban other users, as well as retract the ban.
    A ban means the banner prevents the banned from seeing the banner's information.

    Users have profiles. A profile shows the stream of photos (in reverse), the amount of photos uploaded and
    the user's followers and following.
    Users can change usernames, upload photos (as well as remove them) and follow other users (as well as unfollow them).
    Photo removal also removes its likes and comments.

    Users can search another user's profile via their username.

    Logins are simplified, i.e., they occur just by specifying the user's username.
    From the official project description, 'If the username already exists, the user is logged in.
    If the username is new, the user is registered and logged in.
    The API will return the user identifier you need to pass into the Authorization header in any other API.'
    There won't be HTTP sessions or cookies.
  version: 1.0.0
  license: MIT

tags:
  - name: "User"
    description: Endpoints for user actions
  - name: "Photo"
    description: Endpoints for photo actions
  - name: "Like"
    description: Endpoints for a like (or removal of) actions
  - name: "Comment"
    description: Endpoints for commenting actions
  - name: "Ban"
    description: Endpoints for banning actions
  - name: "Follow"
    description: Endpoints for following (or unfollowing) actions
  - name: "Login"
    description: Endpoints for performing a login action

paths:
  # NOTE: Some operation IDs are renamed to fit the overall styling of the document.

  # Login Tag Related
  /session:
    #* doLogin (from the official course description template)
    post:
      tags: ["Login"]
      summary: Performs a login action
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: do_login
      requestBody:
        description: Presents the user details.
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  pattern: 'Ë†.*?$'
                  example: User2
                  minLength: 5
                  maxLength: 10
        required: true
      responses:
        '201':
          description: User login action successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: string
                    example: User2
                    minLength: 5
                    maxLength: 10
                  user_name:
                    type: string
                    example: Alain
                    minLength: 3
                    maxLength: 15
        # Comments like these two below direct to another, easier to read, location on this file (avoids clogging)
        '400': {$ref: "#/components/responses/BadRequest"}
        '500': {$ref: "#/components/responses/InternalServerError"}

  # User Tag Related
  /user/{user_id}/get_user_profile:
    parameters:
      - $ref: "#/components/parameters/user_id"
    get:
      operationId: get_user_profile
      tags: ["User"]
      summary: Get user profile.
      description: Obtain information on the user in question, user ID, etc. Their profile, essentially.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful request on user's profile information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /user/{user_id}/set_user_id:
    parameters:
      - $ref: "#/components/parameters/user_id"
    put:
      operationId: set_user_id
      tags: ["User"]
      summary: Set user info (ID)
      description: Set new user information, a new ID.
      requestBody:
        description: Newly set user ID.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful request on setting a new user ID.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /user/{user_id}/set_user_name:
    parameters:
      - $ref: "#/components/parameters/user_id"
    put:
      operationId: set_user_name
      tags: ["User"]
      summary: Set the username
      description: Set new user information, a new username.
      security:
        - bearerAuth: []
      requestBody:
        description: Newly set username.
        content:
          application/json:
            schema:
              type: object
              properties:
                user_name:
                  description: The name that a user chooses for themselves.
                  type: string
                  example: Bobby
                  minLength: 3
                  maxLength: 15
        required: true
      responses:
        "200": { description: Username changed successfully }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /user/{user_id}/get_user_stream:
    parameters:
      - $ref: "#/components/parameters/user_id"
    get:
      tags: ["User"]
      operationId: get_user_stream
      summary: Get the stream of a user.
      description: Display the stream of photos of users the user follows, in reverse chronological order.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful request on this user's stream of photos.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stream"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /user/{user_id}/get_followers:
    parameters:
      - $ref: "#/components/parameters/user_id"
    get:
      tags: ["Follow"]
      operationId: get_followers
      description: Display the array of users that follow a user.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful request on this user's follower list.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserArray"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /user/{user_id}/get_following:
    parameters:
      - $ref: "#/components/parameters/user_id"
    get:
      tags: ["Follow"]
      operationId: get_following
      description: Display the array of users that a user is following.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful request on the users following this user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserArray"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  # Photo Tag Related

  # User-Photo Interaction Related
  /user/{user_id}/photo/{photo_id}:
    parameters:
      - $ref: "#/components/parameters/user_id"
      - $ref: "#/components/parameters/photo_id"
    put:
      tags: ["User", "Photo"]
      operationId: upload_photo
      description: A certain user upload a photo.
      security:
        - bearerAuth: []
      requestBody:
        description: Newly published photo.
        content:
          photo_data:
            schema:
              description: The actual data carried by the photo, i.e., an image, a GIF eventually, etc.
              type: object
              properties:
                photo_data:
                  description: The data to be uploaded as a photo.
                  type: string
                  format: binary
                  minLength: 1
                  maxLength: 999
        required: true
      responses:
        "201":
          description: Successful request on uploading a photo.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Photo"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    delete:
      tags: ["User", "Photo"]
      operationId: delete_photo
      description: A certain user deletes a previously self-uploaded photo.
      security:
        - bearerAuth: []
      responses:
        "201":
          description: Successful request on deleting a photo.
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  # User-User Interaction Related

  /user/{user_id}/

  # Search Mechanism Related, although mentioned in the project description, apparently not needed?
  # /search_method:

components:
  # From official template (plus addition(s)) - 400, 401, 404 and 500.
  responses:
    BadRequest:
      description: The request was not compliant with the documentation (eg. missing fields, etc).
    UnauthorizedRequest:
      description: The entity responsible for the request does not have authorization to access the resource.
    NotFound:
      description: The user was not found.
    InternalServerError:
      description: The server encountered an internal error. Further info in server logs.

  securitySchemes:
    bearerAuth:
      scheme: bearer
      type: http

  parameters:
    user_id:
      name: User ID
      description: The user_id uniquely identifies a user.
      schema:
        type: string
        example: User2
        minLength: 5
        maxLength: 10
      in: path
      required: true

    photo_id:
      name: Photo ID
      description: The photo_id uniquely identifies a photo.
      schema:
        type: string
        example: Photo2
        minLength: 6
        maxLength: 11
      in: path
      required: true

  schemas:

    User:
      description: The object that represents a single user.
      type: object
      properties:
        user_id:
          description: The ID that uniquely identifies a user (differentiates them from each other).
          type: string
          example: User2
          minLength: 5
          maxLength: 10
        user_name:
          description: The name that a user chooses for themselves.
          type: string
          example: Alain
          minLength: 3
          maxLength: 15
        photo_nr:
          description: The number of photos a certain user has.
          type: integer
          example: 22
          minimum: 0
        followers_nr:
          description: The number of followers a certain user has.
          type: integer
          example: 222
          minimum: 0
        following_nr:
          description: The number of users a certain user is following.
          type: integer
          example: 2222
          minimum: 0

    UserArray:
      description: The object that represents an array of users
      type: object
      properties:
        user_array:
          description: The array of users, either following or followed by a user
          type: array
          minItems: 1
          items:
            $ref: "#/components/schemas/User"

    Stream:
      description: The object that represents a single stream.
      type: object
      properties:
        user_id:
          description: The ID that uniquely identifies the target of a stream (differentiates them from each other).
          type: string
          example: User2
          minLength: 5
          maxLength: 10
        stream_id:
          description: The ID that uniquely identifies a stream.
          type: string
          example: Stream2
          minLength: 7
          maxLength: 12
        stream:
          description: The stream of photos of users the user follows, in reverse chronological order.
          type: array
          minItems: 0
          maxItems: 499
          items:
            $ref: "#/components/schemas/Photo"

    Photo:
      description: The object that represents a single photo.
      type: object
      properties:
        user_id:
          description: The ID that uniquely identifies the photo's publisher (differentiates them from each other).
          type: string
          example: User2
          minLength: 5
          maxLength: 10
        user_name:
          description: The name that a user chooses for themselves.
          type: string
          example: Alain
          minLength: 3
          maxLength: 15
        photo_id:
          description: The ID that uniquely identifies a photo (differentiates them from each other).
          type: string
          example: Photo2
          minLength: 6
          maxLength: 11
        photo_data:
          description: The data to be uploaded as a photo.
          type: string
          format: binary
          minLength: 1
          maxLength: 999
        photo_time:
          description: The time of publishing of a photo.
          type: string
          pattern: "[0-9]{2}-[0-9]{2}-[0-9]{4} @ [0-9]{2}:[0-9]{2}"
          example: "07-02-2023 @ 18:00"
          minLength: 18
          maxLength: 18
        like_nr:
          description: The number of likes a certain photo has.
          type: integer
          example: 22
          minimum: 0
        like:
          description: Whether a photo is liked by a user.
          type: boolean
          example: true
        comment_nr:
          description: The number of comments a certain photo has.
          type: integer
          example: 222
          minimum: 0

    Like:

    Comment:




